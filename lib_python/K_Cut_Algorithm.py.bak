# K-Cut algorithm
# A continuacion el algoritmo K-Cut

# Se importan las librerias a usar
# Esta libreria es la que tiene la rutina que calcula el corte minimo
from lib_python import Min_Cut_Kargers
# Esta libreria crea una red
import networkx as nx
# Libreria matematica
import math

# Se crea la instancia del GRAFO
G = nx.MultiGraph()

#################################################
# La idea es armar en esta parte el grafo

# Se agregan los arcos con peso, que en este caso son las distancias
# entre los vertices.
# El formato es (nodo_1,nodo_2, distancia_entre_nodos)
G.add_weighted_edges_from([(1, 2, 70), (1, 3, 95), (1, 4, 105),
                           (1, 5, 83), (2, 3, 25), (2, 4, 35),
                           (2, 5, 13), (3, 4, 10), (3, 5, 14),
                           (4, 5, 24)])
#G.add_weighted_edges_from([(1,2,70) , (2,4,1) , (3,4,105), (1,3,1)])


#################################################
# Se resuelve el GRAFO INICIAL

porc_error = 0.005
num_arcos = len(G.edges())
numerador = math.log(porc_error)
factorial = (math.factorial(num_arcos)
             / (math.factorial(num_arcos - 2) * math.factorial(2)))
denominador = math.log(1 - float(1) / factorial)
# Con esto se calcula el numero de iteraciones
itera = int(numerador / denominador)

Grafo_final, Suma_corte_minimo = Min_Cut_Kargers.min_cut(G, itera)
